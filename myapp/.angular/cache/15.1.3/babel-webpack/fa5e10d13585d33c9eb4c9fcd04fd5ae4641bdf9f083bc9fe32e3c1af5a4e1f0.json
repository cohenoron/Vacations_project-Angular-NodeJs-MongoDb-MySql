{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nlet LoginComponent = class LoginComponent {\n  constructor(sharedService) {\n    this.sharedService = sharedService;\n  }\n  onSubmit() {\n    const data = {\n      userName: this.user,\n      password: this.password\n    };\n    console.log(`Username: ${this.user} Password: ${this.password}`);\n    Cookies.remove('token');\n    axios.post('https://react-node-mysql-jwt.herokuapp.com/login', {\n      data\n    }).then(function (response) {\n      const {\n        accessToken,\n        userName,\n        admin\n      } = response.data;\n      console.log(response.data);\n      Cookies.set('token', accessToken, {\n        expires: 0.1\n      });\n      if (response.status === 200) {\n        // setMessage('Successfully logged in')\n        if (admin) {\n          // setModeAdmin(true)\n          // setModeUser(false)\n          // setNameOfUser(userName)\n        }\n        if (!admin) {\n          // setModeUser(true)\n          // setModeAdmin(false)\n          // setNameOfUser(userName)\n        }\n      }\n    }).catch(function (error) {\n      // setMessage(error.response.data)\n    });\n  }\n  handleRegister() {\n    // this.sharedService.showRegiterModal = true;\n    // this.showLoginModal = false;\n    console.log(this.sharedService.showRegisterModal);\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,KAAK,MAAM,OAAO;AASlB,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAIzBC,YAAoBC,aAA4B;IAA5B,kBAAa,GAAbA,aAAa;EAAkB;EAKnDC,QAAQ;IACN,MAAMC,IAAI,GAAG;MAAEC,QAAQ,EAAE,IAAI,CAACC,IAAI;MAAEC,QAAQ,EAAE,IAAI,CAACA;IAAQ,CAAE;IAC7DC,OAAO,CAACC,GAAG,CAAC,aAAa,IAAI,CAACH,IAAI,cAAc,IAAI,CAACC,QAAQ,EAAE,CAAC;IAChET,OAAO,CAACY,MAAM,CAAC,OAAO,CAAC;IACvBX,KAAK,CACFY,IAAI,CAAC,kDAAkD,EAAE;MACxDP;KACD,CAAC,CACDQ,IAAI,CAAC,UAAUC,QAAQ;MACtB,MAAM;QAAEC,WAAW;QAAET,QAAQ;QAAEU;MAAK,CAAE,GAAGF,QAAQ,CAACT,IAAI;MACtDI,OAAO,CAACC,GAAG,CAACI,QAAQ,CAACT,IAAI,CAAC;MAC1BN,OAAO,CAACkB,GAAG,CAAC,OAAO,EAAEF,WAAW,EAAE;QAAEG,OAAO,EAAE;MAAG,CAAE,CAAC;MACnD,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;QAC3B;QAEA,IAAIH,KAAK,EAAE;UACT;UACA;UACA;QAAA;QAEF,IAAI,CAACA,KAAK,EAAE;UACV;UACA;UACA;QAAA;;IAGN,CAAC,CAAC,CACDI,KAAK,CAAC,UAAUC,KAAK;MACpB;IAAA,CACD,CAAC;EACN;EAEAC,cAAc;IACZ;IACA;IACAb,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,aAAa,CAACoB,iBAAiB,CAAC;EACnD;CACD;AA9CYtB,cAAc,eAL1BH,SAAS,CAAC;EACT0B,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWzB,cAAc,CA8C1B;SA9CYA,cAAc","names":["Component","Cookies","axios","LoginComponent","constructor","sharedService","onSubmit","data","userName","user","password","console","log","remove","post","then","response","accessToken","admin","set","expires","status","catch","error","handleRegister","showRegisterModal","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\workSpace\\angular\\myapp\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nimport { Input, Output, EventEmitter } from '@angular/core';\nimport { StateService  } from '../service/shared.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent {\n  user: string | undefined;\n  password: string | undefined;\n\n  constructor(private sharedService: SharedService) {}\n \n\n\n\n  onSubmit() {\n    const data = { userName: this.user, password: this.password };\n    console.log(`Username: ${this.user} Password: ${this.password}`);\n    Cookies.remove('token');\n    axios\n      .post('https://react-node-mysql-jwt.herokuapp.com/login', {\n        data,\n      })\n      .then(function (response) {\n        const { accessToken, userName, admin } = response.data;\n        console.log(response.data);\n        Cookies.set('token', accessToken, { expires: 0.1 });\n        if (response.status === 200) {\n          // setMessage('Successfully logged in')\n\n          if (admin) {\n            // setModeAdmin(true)\n            // setModeUser(false)\n            // setNameOfUser(userName)\n          }\n          if (!admin) {\n            // setModeUser(true)\n            // setModeAdmin(false)\n            // setNameOfUser(userName)\n          }\n        }\n      })\n      .catch(function (error) {\n        // setMessage(error.response.data)\n      });\n  }\n\n  handleRegister() {\n    // this.sharedService.showRegiterModal = true;\n    // this.showLoginModal = false;\n    console.log(this.sharedService.showRegisterModal)\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}