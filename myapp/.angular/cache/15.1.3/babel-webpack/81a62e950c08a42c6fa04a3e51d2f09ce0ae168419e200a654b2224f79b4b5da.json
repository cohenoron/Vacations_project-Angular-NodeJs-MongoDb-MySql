{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nlet StateService = class StateService {\n  //   private jwt = this.Cookies.get('token');\n  //   private api = 'https://react-node-mysql-jwt.herokuapp.com/profile';\n  constructor(http, Cookies) {\n    this.http = http;\n    this.Cookies = Cookies;\n    this.modeUser = new BehaviorSubject(false);\n    this.currentModeUser = this.modeUser.asObservable();\n    this.modeAdmin = new BehaviorSubject(false);\n    this.currentModeAdmin = this.modeAdmin.asObservable();\n    this.showLoginModal = new BehaviorSubject(true);\n    this.currentShowLoginModal = this.showLoginModal.asObservable();\n    this.isLogin = new BehaviorSubject(false);\n    this.currentIsLogin = this.isLogin.asObservable();\n    this.showNewVacationModal = new BehaviorSubject(false);\n    this.currentShowNewVacationModal = this.showNewVacationModal.asObservable();\n    this.showVacationUpdate = new BehaviorSubject(false);\n    this.currentShowVacationUpdate = this.showVacationUpdate.asObservable();\n    this.showVacationDelete = new BehaviorSubject(false);\n    this.currentShowVacationDelete = this.showVacationDelete.asObservable();\n    this.showRegisterModal = new BehaviorSubject(false);\n    this.currentShowRegisterModal = this.showRegisterModal.asObservable();\n    this.nameOfUser = new BehaviorSubject('Guest');\n    this.currentNameOfUser = this.nameOfUser.asObservable();\n  }\n  checkLogin() {\n    if (this.jwt) {\n      this.changeIsLogin(true);\n      this.changeShowLoginModal(false);\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'authorization': `Bearer ${this.jwt}`\n        })\n      };\n      this.http.get(this.api, httpOptions).subscribe(response => {\n        const userName = response['userName'];\n        const isAdmin = response['admin'];\n        if (isAdmin) {\n          this.changeModeAdmin(true);\n          this.changeModeUser(false);\n          this.changeNameOfUser(userName);\n        } else {\n          this.changeModeUser(true);\n          this.changeModeAdmin(false);\n          this.changeNameOfUser(userName);\n        }\n      }, error => {\n        console.error(error.message);\n      });\n    }\n  }\n  changeModeUser(value) {\n    this.modeUser.next(value);\n  }\n  changeModeAdmin(value) {\n    this.modeAdmin.next(value);\n  }\n  changeShowLoginModal(value) {\n    this.showLoginModal.next(value);\n  }\n  changeIsLogin(value) {\n    this.isLogin.next(value);\n  }\n  changeShowNewVacationModal(value) {\n    this.showNewVacationModal.next(value);\n  }\n  changeShowVacationUpdate(value) {\n    this.showVacationUpdate.next(value);\n  }\n  changeShowVacationDelete(value) {\n    this.showVacationDelete.next(value);\n  }\n  changeShowRegisterModal(value) {\n    this.showRegisterModal.next(value);\n  }\n  changeNameOfUser(value) {\n    this.nameOfUser.next(value);\n  }\n};\nStateService = __decorate([Injectable({\n  providedIn: 'root'\n})], StateService);\nexport { StateService };","map":{"version":3,"mappings":"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","names":["Injectable","BehaviorSubject","HttpHeaders","StateService","constructor","http","Cookies","modeUser","asObservable","modeAdmin","showLoginModal","isLogin","showNewVacationModal","showVacationUpdate","showVacationDelete","showRegisterModal","nameOfUser","checkLogin","jwt","changeIsLogin","changeShowLoginModal","httpOptions","headers","get","api","subscribe","response","userName","isAdmin","changeModeAdmin","changeModeUser","changeNameOfUser","error","console","message","value","next","changeShowNewVacationModal","changeShowVacationUpdate","changeShowVacationDelete","changeShowRegisterModal","providedIn"],"sourceRoot":"","sources":["D:\\workSpace\\angular\\myapp\\src\\app\\service\\shared.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport Cookies from 'js-cookie';\r\nimport axios from 'axios';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StateService {\r\n  private modeUser = new BehaviorSubject<boolean>(false);\r\n  currentModeUser = this.modeUser.asObservable();\r\n\r\n  private modeAdmin = new BehaviorSubject<boolean>(false);\r\n  currentModeAdmin = this.modeAdmin.asObservable();\r\n\r\n  private showLoginModal = new BehaviorSubject<boolean>(true);\r\n  currentShowLoginModal = this.showLoginModal.asObservable();\r\n\r\n  private isLogin = new BehaviorSubject<boolean>(false);\r\n  currentIsLogin = this.isLogin.asObservable();\r\n\r\n  private showNewVacationModal = new BehaviorSubject<boolean>(false);\r\n  currentShowNewVacationModal = this.showNewVacationModal.asObservable();\r\n\r\n  private showVacationUpdate = new BehaviorSubject<boolean>(false);\r\n  currentShowVacationUpdate = this.showVacationUpdate.asObservable();\r\n\r\n  private showVacationDelete = new BehaviorSubject<any>(false);\r\n  currentShowVacationDelete = this.showVacationDelete.asObservable();\r\n\r\n  private showRegisterModal = new BehaviorSubject<any>(false);\r\n  currentShowRegisterModal = this.showRegisterModal.asObservable();\r\n\r\n  private nameOfUser = new BehaviorSubject<string>('Guest');\r\n  currentNameOfUser = this.nameOfUser.asObservable();\r\n\r\n//   private jwt = this.Cookies.get('token');\r\n//   private api = 'https://react-node-mysql-jwt.herokuapp.com/profile';\r\n\r\n  constructor(private http: HttpClient, private Cookies: any) {}\r\n\r\n  checkLogin() {\r\n    if (this.jwt) {\r\n      this.changeIsLogin(true);\r\n      this.changeShowLoginModal(false);\r\n\r\n      const httpOptions = {\r\n        headers: new HttpHeaders({\r\n          'authorization': `Bearer ${this.jwt}`\r\n        })\r\n      };\r\n\r\n      this.http.get(this.api, httpOptions)\r\n        .subscribe(\r\n          (response) => {\r\n            const userName = response['userName'];\r\n            const isAdmin = response['admin'];\r\n            if (isAdmin) {\r\n              this.changeModeAdmin(true);\r\n              this.changeModeUser(false);\r\n              this.changeNameOfUser(userName);\r\n            } else {\r\n              this.changeModeUser(true);\r\n              this.changeModeAdmin(false);\r\n              this.changeNameOfUser(userName);\r\n            }\r\n          },\r\n          (error) => {\r\n            console.error(error.message);\r\n          }\r\n        );\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  changeModeUser(value: boolean) {\r\n    this.modeUser.next(value);\r\n  }\r\n\r\n  changeModeAdmin(value: boolean) {\r\n    this.modeAdmin.next(value);\r\n  }\r\n\r\n  changeShowLoginModal(value: boolean) {\r\n    this.showLoginModal.next(value);\r\n  }\r\n\r\n  changeIsLogin(value: boolean) {\r\n    this.isLogin.next(value);\r\n  }\r\n\r\n  changeShowNewVacationModal(value: boolean) {\r\n    this.showNewVacationModal.next(value);\r\n  }\r\n\r\n  changeShowVacationUpdate(value: boolean) {\r\n    this.showVacationUpdate.next(value);\r\n  }\r\n\r\n  changeShowVacationDelete(value: boolean) {\r\n    this.showVacationDelete.next(value);\r\n  }\r\n\r\n  changeShowRegisterModal(value: any) {\r\n    this.showRegisterModal.next(value);\r\n  }\r\n\r\n  changeNameOfUser(value: string) {\r\n    this.nameOfUser.next(value);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}