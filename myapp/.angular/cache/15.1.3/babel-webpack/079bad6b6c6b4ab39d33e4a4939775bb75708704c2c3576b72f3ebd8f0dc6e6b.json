{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nlet LoginComponent = class LoginComponent {\n  constructor(stateService) {\n    this.stateService = stateService;\n  }\n  onSubmit() {\n    const data = {\n      userName: this.user,\n      password: this.password\n    };\n    console.log(`Username: ${this.user} Password: ${this.password}`);\n    Cookies.remove('token');\n    axios.post('http://localhost:8080/login', {\n      data\n    }).then(response => {\n      const {\n        accessToken,\n        userName,\n        admin\n      } = response.data;\n      console.log(response.data);\n      Cookies.set('token', accessToken, {\n        expires: 0.1\n      });\n      this.stateService.changeNameOfUser(userName);\n      if (response.status === 200) {\n        alert('Successfully logged in');\n        if (admin) {\n          this.stateService.changeModeAdmin(true);\n          this.stateService.changeModeUser(false);\n          this.stateService.changeNameOfUser(userName);\n        }\n        if (!admin) {\n          this.stateService.changeModeUser(true);\n          this.stateService.changeModeAdmin(false);\n          this.stateService.changeNameOfUser(userName);\n        }\n      }\n    }).catch(function (error) {\n      alert(error.response.data);\n    });\n    this.stateService.currentShowRegisterModal.subscribe(value => {\n      this.showRegisterModal = value;\n    });\n    this.stateService.currentNameOfUser.subscribe(value => {\n      this.nameOfUser = value;\n    });\n  }\n  handleRegister() {\n    this.stateService.changeShowLoginModal(false);\n    this.stateService.changeShowRegisterModal(true);\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,KAAK,MAAM,OAAO;AAYlB,IAAMC,cAAc,GAApB,MAAMA,cAAc;EAMzBC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAiB;EAEjDC,QAAQ;IACN,MAAMC,IAAI,GAAG;MAAEC,QAAQ,EAAE,IAAI,CAACC,IAAI;MAAEC,QAAQ,EAAE,IAAI,CAACA;IAAQ,CAAE;IAC7DC,OAAO,CAACC,GAAG,CAAC,aAAa,IAAI,CAACH,IAAI,cAAc,IAAI,CAACC,QAAQ,EAAE,CAAC;IAChET,OAAO,CAACY,MAAM,CAAC,OAAO,CAAC;IACvBX,KAAK,CACFY,IAAI,CAAC,6BAA6B,EAAE;MACnCP;KACD,CAAC,CACDQ,IAAI,CAAEC,QAAQ,IAAI;MACjB,MAAM;QAAEC,WAAW;QAAET,QAAQ;QAAEU;MAAK,CAAE,GAAGF,QAAQ,CAACT,IAAI;MACtDI,OAAO,CAACC,GAAG,CAACI,QAAQ,CAACT,IAAI,CAAC;MAC1BN,OAAO,CAACkB,GAAG,CAAC,OAAO,EAAEF,WAAW,EAAE;QAAEG,OAAO,EAAE;MAAG,CAAE,CAAC;MACnD,IAAI,CAACf,YAAY,CAACgB,gBAAgB,CAACb,QAAQ,CAAC;MAC5C,IAAIQ,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAE;QAC3BC,KAAK,CAAC,wBAAwB,CAAC;QAE/B,IAAIL,KAAK,EAAE;UACT,IAAI,CAACb,YAAY,CAACmB,eAAe,CAAC,IAAI,CAAC;UACvC,IAAI,CAACnB,YAAY,CAACoB,cAAc,CAAC,KAAK,CAAC;UACvC,IAAI,CAACpB,YAAY,CAACgB,gBAAgB,CAACb,QAAQ,CAAC;;QAE9C,IAAI,CAACU,KAAK,EAAE;UACV,IAAI,CAACb,YAAY,CAACoB,cAAc,CAAC,IAAI,CAAC;UACtC,IAAI,CAACpB,YAAY,CAACmB,eAAe,CAAC,KAAK,CAAC;UACxC,IAAI,CAACnB,YAAY,CAACgB,gBAAgB,CAACb,QAAQ,CAAC;;;IAGlD,CAAC,CAAC,CACDkB,KAAK,CAAC,UAAUC,KAAK;MACpBJ,KAAK,CAACI,KAAK,CAACX,QAAQ,CAACT,IAAI,CAAC;IAC5B,CAAC,CAAC;IAEJ,IAAI,CAACF,YAAY,CAACuB,wBAAwB,CAACC,SAAS,CAAEC,KAAK,IAAI;MAC7D,IAAI,CAACC,iBAAiB,GAAGD,KAAK;IAChC,CAAC,CAAC;IACF,IAAI,CAACzB,YAAY,CAAC2B,iBAAiB,CAACH,SAAS,CAAEC,KAAK,IAAI;MACtD,IAAI,CAACG,UAAU,GAAGH,KAAK;IACzB,CAAC,CAAC;EACJ;EAEAI,cAAc;IACZ,IAAI,CAAC7B,YAAY,CAAC8B,oBAAoB,CAAC,KAAK,CAAC;IAC7C,IAAI,CAAC9B,YAAY,CAAC+B,uBAAuB,CAAC,IAAI,CAAC;EACjD;CACD;AApDYjC,cAAc,eAL1BH,SAAS,CAAC;EACTqC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,GACWpC,cAAc,CAoD1B;SApDYA,cAAc","names":["Component","Cookies","axios","LoginComponent","constructor","stateService","onSubmit","data","userName","user","password","console","log","remove","post","then","response","accessToken","admin","set","expires","changeNameOfUser","status","alert","changeModeAdmin","changeModeUser","catch","error","currentShowRegisterModal","subscribe","value","showRegisterModal","currentNameOfUser","nameOfUser","handleRegister","changeShowLoginModal","changeShowRegisterModal","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\workSpace\\angular\\myapp\\src\\app\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport Cookies from 'js-cookie';\nimport axios from 'axios';\nimport { Input, Output, EventEmitter } from '@angular/core';\nimport { StateService } from '../service/shared.service';\nimport {MatIconModule} from '@angular/material/icon'\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent {\n  user: string | undefined;\n  password: string | undefined;\n  showRegisterModal: boolean | undefined;\n  nameOfUser: string | undefined;\n\n  constructor(private stateService: StateService) {}\n\n  onSubmit() {\n    const data = { userName: this.user, password: this.password };\n    console.log(`Username: ${this.user} Password: ${this.password}`);\n    Cookies.remove('token');\n    axios\n      .post('http://localhost:8080/login', {\n        data,\n      })\n      .then((response) => {\n        const { accessToken, userName, admin } = response.data;\n        console.log(response.data);\n        Cookies.set('token', accessToken, { expires: 0.1 });\n        this.stateService.changeNameOfUser(userName);\n        if (response.status === 200) {\n          alert('Successfully logged in');\n\n          if (admin) {\n            this.stateService.changeModeAdmin(true);\n            this.stateService.changeModeUser(false);\n            this.stateService.changeNameOfUser(userName);\n          }\n          if (!admin) {\n            this.stateService.changeModeUser(true);\n            this.stateService.changeModeAdmin(false);\n            this.stateService.changeNameOfUser(userName);\n          }\n        }\n      })\n      .catch(function (error) {\n        alert(error.response.data);\n      });\n\n    this.stateService.currentShowRegisterModal.subscribe((value) => {\n      this.showRegisterModal = value;\n    });\n    this.stateService.currentNameOfUser.subscribe((value) => {\n      this.nameOfUser = value;\n    });\n  }\n\n  handleRegister() {\n    this.stateService.changeShowLoginModal(false);\n    this.stateService.changeShowRegisterModal(true);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}